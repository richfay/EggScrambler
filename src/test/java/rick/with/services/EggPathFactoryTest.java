package rick.with.services;


import org.easymock.EasyMockSupport;
import org.junit.Test;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Tests the combos generated by the {@link EggComboUtil}
 */
public class EggPathFactoryTest extends EasyMockSupport {

    private static final int TOTAL_COMBOS = 338;
    private static final int REDUCED_COMBOS = 210;

    @Test
    public void testGenerate338Paths() {

        LinkedList<StringBuffer> combos = EggComboUtil.get338Combos();

        Set<String> uniqueCombos = new HashSet<>(TOTAL_COMBOS);

        for (StringBuffer combo : combos) {

            char firstChar = combo.charAt(0);

            assertTrue(combo.toString(), firstChar == 'L' || firstChar == 'R');
            assertEquals(combo.toString(), 'U', combo.charAt(7));

            uniqueCombos.add(combo.toString());
        }

        assertEquals(TOTAL_COMBOS, uniqueCombos.size());
    }

    @Test
    public void testGenerate210Paths() {

        LinkedList<StringBuffer> combos = EggComboUtil.get210Combos();

        Set<String> uniqueCombos = new HashSet<>(REDUCED_COMBOS);

        for (StringBuffer combo : combos) {

            char firstChar = combo.charAt(0);

            assertTrue(combo.toString(), firstChar == 'L' || firstChar == 'R');
            assertTrue(combo.toString(), combo.indexOf("L") != -1);
            assertTrue(combo.toString(), combo.indexOf("R") != -1);
            assertEquals(combo.toString(), 'U', combo.charAt(7));

            uniqueCombos.add(combo.toString());
        }

        assertEquals(REDUCED_COMBOS, uniqueCombos.size());
    }
}
